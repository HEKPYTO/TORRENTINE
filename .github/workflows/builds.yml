name: Create Release

on:
  workflow_run:
    workflows: ["Java Tests"]
    types:
      - completed
    branches: [main]

permissions:
  contents: write

jobs:
  create-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get Latest Release
        id: latest_release
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0")
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV

      - name: Prepare Build Directories
        run: |
          mkdir -p temp/student temp/solution
          
          # Sync student directory
          rsync -av --delete \
            --exclude 'test/build/' \
            --exclude 'test/solution/' \
            --exclude 'base/' \
            src/ temp/student/

          # Sync solution directory
          rsync -av --delete \
            --exclude 'test/build/' \
            --exclude 'test/validate/' \
            src/ temp/solution/

      - name: Compare with Latest Release
        id: compare_changes
        run: |
          # Extract latest release files
          mkdir -p prev
          if [ "$LATEST_TAG" != "v0" ]; then
            git checkout $LATEST_TAG
            if [ -f student.zip ]; then
              unzip -o student.zip -d prev/
            fi
            if [ -f solution.zip ]; then
              unzip -o solution.zip -d prev/
            fi
          fi

          # Compare directories
          STUDENT_CHANGED=0
          SOLUTION_CHANGED=0
          
          if ! diff -r prev/temp/student temp/student >/dev/null 2>&1; then
            STUDENT_CHANGED=1
          fi
          if ! diff -r prev/temp/solution temp/solution >/dev/null 2>&1; then
            SOLUTION_CHANGED=1
          fi
          
          # Set outputs
          echo "student_changed=${STUDENT_CHANGED}" >> $GITHUB_OUTPUT
          echo "solution_changed=${SOLUTION_CHANGED}" >> $GITHUB_OUTPUT

      - name: Create Release if Changes Detected
        if: |
          (steps.compare_changes.outputs.student_changed == 1 && steps.compare_changes.outputs.solution_changed == 1) ||
          steps.compare_changes.outputs.student_changed == 1 ||
          steps.compare_changes.outputs.solution_changed == 1
        run: |
          # Create zip files based on changes
          if [ "${{ steps.compare_changes.outputs.student_changed }}" == "1" ]; then
            zip -r student.zip temp/student
          fi
          if [ "${{ steps.compare_changes.outputs.solution_changed }}" == "1" ]; then
            zip -r solution.zip temp/solution
          fi

          # Create release
          gh release create "v${{ github.run_number }}" \
            --title "Build V${{ github.run_number }}" \
            --notes "This release contains updated files for changed directories" \
            $([ -f student.zip ] && echo "student.zip") \
            $([ -f solution.zip ] && echo "solution.zip")
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: rm -rf temp prev student.zip solution.zip